<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--  spring 的依赖注入
            依赖注入，Dependency Injection
            IOC 的作用，降低程序间的耦合
            依赖关系的管理，以后都交给 spring 来维护
            在当前类中需要用到其他类的对象，由spring 为我们提供，我们只需要在零配置文件中说明
            依赖关系的维护，就称之为依赖注入

            依赖注入
                能注入的数据，三类
                    基本类型和 String
                    其他 bean 类型，（在配置文件中或注解配置过的 bean）
                    复杂类型/集合类型
                注入的方式，三种
                    1.使用构造函数提供
                    2.使用 set 方法提供
                    3.使用注解提供  -->

    <!--  构造函数注入
            使用标签 constructor-arg
            在 bean 标签内部使用
            标签的属性
                type, 用于指定要注入的数据类型，该类数据类型也是构造函数中某个或某些参数的类型
                index, 指定要注入的数据给构造函数中指定索引的位置，索引从 0 开始
                name, 用于给构造函数中指定名称的参数赋值

                - 以上用于给指定的构造函数中指定名称的参数赋值 -

                value, 用于给基本类型和 String 类型
                ref, 用于指定其他 bean 类型，它指的就是在 spring 的 ioc 核心容器中出现过的 bean 对象
            优势
                在注入数据时，注入数据时必须的操作，否则无法创建对象成功
            弊端
                改变了 bean 对象的实例化方式，使我们在创建对象时，用不到的数据也必须提供
        -->

    <bean id="accountService" class="com.com.joush.service.impl.AccountServiceImpl">
        <constructor-arg type="java.lang.String" name="name" value="test"></constructor-arg>
        <constructor-arg type="int" name="age" value="18"></constructor-arg>
        <constructor-arg type="java.util.Date" name="birthday" ref="now"></constructor-arg>
    </bean>
    <bean id="now" class="java.util.Date"></bean>


    <!--  set 方法注入 （更常用）
            使用标签 property
            在标签 bean 内部使用
            标签的属性
                name, 用于指定注入时所调用的 set 方法名称
                value, 用于给基本类型和 String 类型
                ref, 用于指定其他 bean 类型，它指的就是在 spring 的 ioc 核心容器中出现过的 bean 对象
            优势
                创建对象是时，明确的限制，可以直接使用默认构造函数
             弊端
                如果某个成员必须有值，获取对象时 set 方法无法保证一定执行
      -->
    <bean id="accountService2" class="com.com.joush.service.impl.AccountServiceImpl2">
        <property name="name" value="test2"></property>
        <property name="age" value="20"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!--  复杂类型的数据注入
            用于给 List 集合注入的标签
                list array set
            用于给 Map 集合注入的标签
                map props
            即，结构相同即可通用标签
        -->
    <bean id="accountService3" class="com.com.joush.service.impl.AccountServiceImpl3">
        <property name="myStrings">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <property name="myList">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>

        <property name="myMap">
            <map>
                <!--  两种均可  -->
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>bbb</value>
                </entry>
            </map>
        </property>

        <property name="properties">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>
    </bean>
</beans>