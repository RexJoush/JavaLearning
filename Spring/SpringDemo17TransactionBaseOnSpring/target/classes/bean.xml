<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--  配置账户的服务层  -->
    <bean id="accountService" class="com.joush.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>
    <!--  配置账户的持久层  -->
    <bean id="accountDao" class="com.joush.dao.impl.AccountDaoImpl">
        <property name="dataSource" ref="dateSource"></property>
    </bean>


    <bean id="dateSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/joush?serverTimezone=UTC"></property>
        <property name="username" value="root"></property>
        <property name="password" value="liyihang123"></property>
    </bean>

    <!--  spring 中基于 XML 的声明式事务控制配置步骤

        1.配置事务管理器
        2.配置事务通知
            需要导入事务约束 tx 名称空间和约束，同时也需要 aop 的
            使用 tx:advice 标签配置事务通知
                属性
                    id 事务通知的唯一标识
                    transaction-manager 给事务通知提供事务管理器的引用
        3.配置 aop 的切入点表达式
        4.建立事务通知和切入点表达式的关系
        5.配置事务的属性
            在事务通知 tx:advice 标签内部
      -->

    <!--  配置事务管理器  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dateSource"></property>
    </bean>

    <!--  配置事务通知  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">

        <!--
            配置事务的属性
            isolation: 用于指定事务的隔离级别，默认值是 DEFAULT，表示使用数据库的默认级别
            read-only: 用于指定事务是否只读，只有查询方法可以设置为 true，默认为 false，表示读写
            timeout: 用于指定事务的超时时间，默认为 -1，表示永不超时，可以指定数值，以秒为单位
            propagation: 用于指定事务的传播行为，默认值是 REQUIRED，表示一定会有事务，增删改的选择，查询方法可以选择 SUPPORTS
            rollback-for: 用于指定一个异常，当产生该异常时，事务回滚，产生其他异常，不回滚。没有默认值，表示任何异常都回滚
            no-rollback-for: 用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常，都回滚。没有默认值，表示任何异常都回滚
            -->
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" read-only="false"/> <!--  所有方法  -->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" /> <!--  查询方法以 find 开头  -->
        </tx:attributes>
    </tx:advice>

    <!--  配置aop  -->
    <aop:config>
        <!--  配置切入点表达式  -->
        <aop:pointcut id="pt1" expression="execution(* com.joush.service.impl.*.*(..))"></aop:pointcut>

        <!--  建立切入点表达式和事务通知的对应关系  -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"></aop:advisor>

    </aop:config>
        
</beans>